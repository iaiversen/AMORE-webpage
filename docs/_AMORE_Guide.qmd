---
title: "Guide for managing AMORE website"
author: "Ingebjørg A. Iversen"
format: pdf
editor: visual
---

Stuff I need to add somewhere

-   If you want to add a file that you do not want to render or deploy add it to .gitignore. And the quarto.yml file that structures the platform has been directed to ignore files that begins with underscore \_ e.g. I have the \_recoveryfile.qmd that I use to save script before doing bigger changes so that if the new changes messes up something I can very easily retrieve the old code that did work. I also use this for the template to the project pages.

-   CSS shorthand rules

    -   margin shorthand rules:

        **1 value:** `margin: 10px;`

        -   

        -   All 4 sides get 10px

        -   

        **2 values:** `margin: 10px 20px;`

        -   

        -   First value (10px) = top AND bottom

        -   

        -   Second value (20px) = left AND right

        -   

        **3 values:** `margin: 10px 20px 30px;`

        -   

        -   First = top

        -   

        -   Second = left AND right

        -   

        -   Third = bottom

        -   

        **4 values:** `margin: 10px 20px 30px 40px;`

        -   

        -   Goes clockwise: top, right, bottom, left (like a clock starting at 12)

### Table of content

1.  Important information
2.  Getting Started (Git clone, dependencies)
3.  Project Structure Overview
    1.  (Folder structure,

    2.  what needs to be where, where do you need to save things to add it)

    3.  Explaining the SCSS system, configurations files,

    4.  deployment process
4.  File-by-File Breakdown
    1.  explain .gitignore
    2.  Styles.scss
        1.  The styles.scss is devided into different sections
        2.  The standard screen size codes, and the @media sections with adjusted screen layout for smaller tablets and mobile screens
5.  Contributions Guidelines 1. troubleshooting (inspect in browser, rendering before pushing to git, sometimes invisible spaces ruing everything!!!!!) 2. How to add project files 3. how to add new website pages 4. How to make design changes
    -   sync_styles function (the function was created in the Setup.R script and syncs all the scss files across folders. These folders are there because quarto look for scss in different folders for different qmd files, and while one scss in the root folder technically should be enough, I experienced that quarto had problems with collecting or findings the scss rules unless I had the scss file in the same folder as the .qmd. However, some times even though there is a scss in the same folder as a .qmd the .qmd still gets its scss rules from another scss file, and it is no information about what file get rendering rules from what scss, therefore the scss file is distributed in all folders that need scss rendering rules, but are identical and synchronized from the root styles.scss. After you have done changes to the styles.scss in the root folder (AMORE-webpage") write sync_styles in the console (make sure the function has been activated from the Setup.R script).

        -   if you make alterations, make sure those alterations fit with @media adjustable screen sizes

    -   How to add new website pages (add to yaml navigation) save in correct folder

## 1. Important information

### 1.1 The Different Languages

The AMORE website is built using multiple programming languages and frameworks that work together:

Quarto Markdown (.qmd): Primary content files for pages SCSS/CSS: Styling and responsive design JavaScript: Interactive functionality and client-side behavior R: Shiny app backend, data processing, and setup scripts HTML: Embedded within Quarto files for custom components Shell scripts: Deployment and automation tasks

#### Why multiple languages? Each serves a specific purpose:

Quarto allows academic content with citations and technical writing SCSS provides maintainable, organized styling with variables JavaScript enables interactivity (filter tabs, pagination) R powers the dynamic Living Meta-Analysis directory HTML gives precise control over structure when needed

### 1.2 RStudio and Quarto

RStudio is your primary development environment. Install:

R (version 4.0.0+) from CRAN RStudio Desktop from Posit Quarto CLI - Usually bundled with RStudio, or install from quarto.org

Key RStudio features for this project:

Visual editor for .qmd files Terminal for git commands Console for running R functions (like sync_styles()) Files pane for navigation Viewer for previewing rendered pages

### 1.3 GitHub, ShinyApps.io, and Netlify

Three platforms work together: GitHub (Version Control & Collaboration)

Repository: iaiversen/AMORE-webpage Stores all source code Tracks changes with commit history Enables collaboration through pull requests Important: Never commit sensitive data (API keys, passwords)

ShinyApps.io (Shiny App Hosting)

Hosts the Living Meta-Analysis directory (app.R) Free tier limitations: limited active hours, connection timeouts URL: https://meta-oxytocin.shinyapps.io/shiny-meta/ Embedded in Living_meta-analysis_Directory.qmd via iframe

Netlify (Website Hosting)

Automatically deploys from GitHub Builds site from \_site folder after Quarto render Domain: amore-project.org Configuration in netlify.toml

Deployment workflow:

Make changes locally in RStudio Test by rendering (quarto render or Render button) Commit and push to GitHub Netlify automatically rebuilds and deploys For Shiny app: Deploy separately using rsconnect::deployApp()

### 1.4 Two-Factor Authentication

Why it matters: Protects the project from unauthorized access. Where you need 2FA:

Netlify account: For deployment settings

## 2. Getting started

### 2.1 Git Clone

**First time setup:**

bash or Windows powershell

```{bash}
#| label: git-clone
#| eval: false
#| echo: true 

# In terminal/command line:
cd ~/Documents  # or your preferred location
git clone https://github.com/iaiversen/AMORE-webpage.git
cd AMORE-webpage
```

**In RStudio:**

1.  File → New Project → Version Control → Git

2.  Repository URL: `https://github.com/iaiversen/AMORE-webpage.git`

3.  Choose directory location

4.  Create Project

### 2.2 Dependencies

**Install all required packages:**

Open `Setup.R` and run the entire script. This installs:

**Core packages:**

-   `rmarkdown`, `knitr`, `quarto` - Document rendering

-   `shiny`, `rsconnect` - Shiny app deployment

-   `DT`, `yaml`, `fs`, `httr`, `jsonlite` - Data handling

-   `bslib`, `sass` - Styling

-   `tinytex` - LaTeX/PDF support

**The script handles:**

-   Checking if packages are already installed

-   Installing missing packages

-   Loading libraries

-   Setting up TinyTeX distribution

**Run once after cloning:**

```{r}
#| label: Setup script for dependencies 
#| eval: false 
#| echo: true 

source("Setup.R")
```

### 2.3 Verify Installation

**Test that everything works:**

r console

```{r}
#| label: Verify installation in r console 
#| eval: false 
#| echo: true 

("quarto --version") # Check Quarto system
quarto::quarto_render("index.qmd") # Test rendering a single page 
source("Setup.R") sync_styles() # Test sync_styles function
```

## 3. Project structure overview

```{bash}
#| label: Root folder (AMORE-webpage) and the file structure
#| eval: false
#| echo: true 

AMORE/
├── index.qmd                          # Homepage (root level)
├── _quarto.yml                        # Main config
├── LICENSE
├── README.md
├── .gitignore
├── package.json
├── AMORE.Rproj
│
├── assets/
│   ├── favicons/                      # All favicon files
│   ├── images/                        # Logo and visual assets
│   └── styles/
│       └── styles.scss                # Main stylesheet
│
├── pages/                             # All content pages
│   ├── about.qmd
│   ├── contact.qmd
│   ├── guidelines.qmd
│   ├── Living_meta-analysis_Directory.qmd
│   ├── Protocol_checklist.qmd
│   ├── Resources.qmd
│   └── Standardization.qmd
│
├── LMAs/                              # Living Meta-Analysis projects
│   ├── lma-template.qmd
│   ├── Kang_non-social_executive_function.qmd
│   ├── moxnes_perinatal_oxytocin.qmd
│   └── styles.scss                    #
│
├── docs/                              # Documentation
│   ├── AMORE_Guide.qmd
│   └── Testfile.qmd
│
├── scripts/                           # Utility scripts
│   ├── Setup.R
│   └── sync-styles.bat
│
├── deployment/                        # Deployment configs
│   ├── netlify.toml
│   ├── netlify-setup-quarto.sh
│   └── install-quarto.sh
│
├── shiny-meta/                        # Shiny application
│   ├── app.R
│   ├── deploy.R
│   ├── README.md
│   ├── rsconnect/
│   └── www/
│
└── _site/                             # Generated site (output)
```

## 4. File-by-file breakdown

### 4.1 .gitignore Explained

**Purpose:** Tells Git which files to ignore (not track/commit).

**Current exclusions:**

```{bash}
#| label: .gitignore contents
#| eval: false
#| echo: true

.Rproj.user/      # RStudio project files
.Rhistory         # R command history
.RData            # R workspace data
.Ruserdata        # User-specific R settings
/_quarto/         # Quarto cache
**/_quarto_internal_scss_error.scss  # Temporary error files
```

**Why exclude these:**

-   RStudio files are user-specific

-   \_site/ is generated, not source code

-   Cache files speed up local rendering but aren't needed in repo

-   Reduces repository size

**Never add to .gitignore:**

-   Source files (.qmd, .R, .scss)

-   Configuration files (\_quarto.yml, netlify.toml)

-   Assets (images, logos)

### 4.2 styles.scss Deep Dive

4.3 How the app.R filter and search functions with the app.R

## 5. Contributions guidelines

### 5.1 How to add projects

### 5.2 How to add websites to AMORE

### 5.3 Troubleshooting
