---
title: "Guide for managing AMORE website"
author: "Ingebjørg A. Iversen"
format: pdf
editor: visual
---

### List of stuff I need to add somewhere into this document: 

-   If you want to add a file that you do not want to render or deploy add it to .gitignore. Also, the quarto.yml file that structures the platform has been directed to ignore files that begins with underscore \_ e.g. I have the \_recoveryfile.qmd that I use to save script before doing bigger changes so that if the new changes messes up something I can very easily retrieve the old code that did work. I also use this for the template to the project pages.

## Table of content

1.  Important information
2.  Getting started
3.  Project structure overview
4.  Styling system SCSS
5.  Adding new projects
6.  website maintenance
7.  Troubleshooting

## 1. Important information

### 1.1 Introduction information

AMORE is a website created by Ingebjørg Anjadatter Iversen for the behavioral Neuroendocrinology Lab to host living meta-analysis for oxytocin research investigating biobehavioral outcomes.

This document instructs about MAINTANCE, ADDING PROJECTS, and AMORE project INFRASTRUCTURE

AMORE was built using RStudio and Quarto. Netlify deploys the webiste, and GitHub is used to host and share script. Netlify is accessing the script from the github repository for AMORE. Nettskjema is used as a medium between users and the AMORE team or the lab with different contacting forms

### 1.2 GitHub repository

Repository: AMORE-webpage

Repository URL: https://github.com/iaiversen/AMORE-webpage

Created by github account: iaiversen (Ingebjørg Anjadatter Iversen)

Collaborators: dsquintana (Daniel quintana)

#### 1.2.1 Repository License

AMORE-webpage repository has the MIT license. It gives open access. The LICENSE file is in the root folder (AMORE-webpage).

### 1.3 Github, ShinyApps.io and Netlify

Three platforms work together:

#### GitHub (Version Control & Collaboration)

Repository: iaiversen/AMORE-webpage Stores all source code Tracks changes with commit history Enables collaboration through pull requests Important: Never commit sensitive data (API keys, passwords)

#### ShinyApps.io (Shiny App Hosting)

Hosts the Living Meta-Analysis directory (app.R) Free tier limitations: limited active hours, connection timeouts URL: https://meta-oxytocin.shinyapps.io/shiny-meta/ Embedded in Living_meta-analysis_Directory.qmd via iframe

#### Netlify (Website Hosting)

Automatically deploys from GitHub Builds site from \_site folder after Quarto render Domain: amore-project.org Configuration in netlify.toml

#### Deployment workflow:

Make changes locally in RStudio Test by rendering (quarto render or Render button) Commit and push to GitHub. Netlify automatically rebuilds and deploys. For Shiny app: Deploy separately using rsconnect::deployApp()

#### 1.3.1 Netlify login and important

two-step authenticator

#### 1.3.2 Shinyapp.io login and important

### 1.4 RStudio and Quarto

RStudio is your primary development environment. Install:

R (version 4.0.0+) from CRAN RStudio Desktop from Posit Quarto CLI - Usually bundled with RStudio, or install from quarto.org

#### 1.4.1 The Different Languages

The AMORE website is built using multiple programming languages and frameworks that work together: Quarto is multilingual, Just specify in the code chunk what language is used.

The languages used:

-   Quarto Markdown (.qmd): Primary content files for pages

-   SCSS/CSS: Styling and responsive design

-   JavaScript: Interactive functionality and client-side behavior

-   R: Shiny app backend, data processing, and setup scripts

-   HTML: Embedded within Quarto files for custom components Shell scripts: Deployment and automation tasks

#### 1.4.2

To use a specific language just encompass the code chunk in the right way for example like the r code here or html. Quarto specific language does not need any specifications.

```{r}
#| label: Setup script for dependencies 
#| eval: false 
#| echo: true 

Here I write r code
```

````{=html}
To write html code encapsle the code in 

```{=html}

Inside here write html code 

```
````

#### Why multiple languages? Each serves a specific purpose:

Quarto allows academic content with citations and technical writing SCSS provides maintainable, organized styling with variables JavaScript enables interactivity (filter tabs, pagination) R powers the dynamic Living Meta-Analysis directory HTML gives precise control over structure when needed

### 1.5 Nettskjema

Ediorial right for nettskjema forms:

-   ingebjai\@uio.no

-   danielqu\@uio.no

The users reach out to the AMORE team through Nettskjema. They find the nettskjema through links on the AMORE website.

The nettskjema forms are:

1.  Contact form AMORE

    -   First form users get to.

    -   Redirects to the other three forms

2.  Propose your project

3.  General inquiry

4.  Update an existing living meta-analysis

Emails of responses to any of these forms goes to:

-   ingebjai\@student.sv.uio.no

-   daniel.quintana\@psykologi.no

    -   Dan streamlines the response to the relevant people for evaluation of project or getting in contact with the right people. (Rest of AMORE team).

#### 1.5.1 What if this contact system needs change?

Vis et Nettskjema på en nettside (embedding) - Universitetet i Oslo

## 2. Getting started

### 2.1 Prerequisites

-   R (Version 4.0.0 or higher) - programming language

-   Rstudio - Integrated Development Environment (IDE) for R.

-   Quarto - Document publishing system for creating websites or reports

-   Github account

### 2.1 Git Clone

**First time setup:**

bash or Windows powershell

```{bash}
#| label: git-clone
#| eval: false
#| echo: true 

# In powershell or bash terminal/command line:
cd ~/Documents  # or your preferred location
git clone https://github.com/iaiversen/AMORE-webpage.git
cd AMORE-webpage
```

**In RStudio:**

1.  File → New Project → Version Control → Git

2.  Repository URL: `https://github.com/iaiversen/AMORE-webpage.git`

3.  Choose directory location

4.  Create Project

### 2.2 Dependencies

**Install all required packages:**

Open `Setup.R` and run the entire script. This installs:

**Core packages:**

-   `rmarkdown`, `knitr`, `quarto` - Document rendering

-   `shiny`, `rsconnect` - Shiny app deployment

-   `DT`, `yaml`, `fs`, `httr`, `jsonlite` - Data handling

-   `bslib`, `sass` - Styling

-   `tinytex` - LaTeX/PDF support

**The script handles:**

-   Checking if packages are already installed

-   Installing missing packages

-   Loading libraries

-   Setting up TinyTeX distribution

**Run once after cloning:**

```{r}
#| label: Setup script for dependencies 
#| eval: false 
#| echo: true 

source("Setup.R")
```

### 2.3 Verify Installation

**Test that everything works:**

r console

```{r}
#| label: Verify installation in r console 
#| eval: false 
#| echo: true 

("quarto --version") # Check Quarto system
quarto::quarto_render("index.qmd") # Test rendering a single page 
source("Setup.R") sync_styles() # Test sync_styles function
```

## 3. Project structure overview

```{bash}
#| label: Root folder (AMORE-webpage) and the file structure
#| eval: false
#| echo: true 

AMORE/
├── index.qmd                          # Homepage (root level)
├── _quarto.yml                        # Main config
├── LICENSE
├── README.md
├── .gitignore
├── package.json
├── AMORE.Rproj
│
├── assets/
│   ├── favicons/                      # All favicon files
│   ├── images/                        # Logo and visual assets
│   └── styles/
│       └── styles.scss                # Main stylesheet
│
├── pages/                             # All content pages
│   ├── about.qmd
│   ├── contact.qmd
│   ├── guidelines.qmd
│   ├── Living_meta-analysis_Directory.qmd
│   ├── Protocol_checklist.qmd
│   ├── Resources.qmd
│   └── Standardization.qmd
│
├── LMAs/                              # Living Meta-Analysis projects
│   ├── lma-template.qmd
│   ├── Kang_non-social_executive_function.qmd
│   ├── moxnes_perinatal_oxytocin.qmd
│   └── styles.scss                    #
│
├── docs/                              # Documentation
│   ├── AMORE_Guide.qmd
│   └── Testfile.qmd
│
├── scripts/                           # Utility scripts
│   ├── Setup.R
│   └── sync-styles.bat
│
├── deployment/                        # Deployment configs
│   ├── netlify.toml
│   ├── netlify-setup-quarto.sh
│   └── install-quarto.sh
│
├── shiny-meta/                        # Shiny application
│   ├── app.R
│   ├── deploy.R
│   ├── README.md
│   ├── rsconnect/
│   └── www/
│
└── _site/                             # Generated site (output)
```

## 3.? File-by-file breakdown

### 3.1 .gitignore Explained

**Purpose:** Tells Git which files to ignore (not track/commit).

**Current exclusions:**

```{bash}
#| label: .gitignore contents
#| eval: false
#| echo: true

.Rproj.user/      # RStudio project files
.Rhistory         # R command history
.RData            # R workspace data
.Ruserdata        # User-specific R settings
/_quarto/         # Quarto cache
**/_quarto_internal_scss_error.scss  # Temporary error files
```

**Why exclude these:**

-   RStudio files are user-specific

-   \_site/ is generated, not source code

-   Cache files speed up local rendering but aren't needed in repo

-   Reduces repository size

**Never add to .gitignore:**

-   Source files (.qmd, .R, .scss)

-   Configuration files (\_quarto.yml, netlify.toml)

-   Assets (images, logos)

### 3.2 styles.scss Deep Dive

3.3 How the app.R filter and search functions with the app.R

## 4. Styling system SCSS

#### 4.? SCSS shorthand rules

-   CSS shorthand rules

    -   margin shorthand rules:

        **1 value:** `margin: 10px;`

        -   All 4 sides get 10px

        **2 values:** `margin: 10px 20px;`

        -   First value (10px) = top AND bottom

        -   Second value (20px) = left AND right

        **3 values:** `margin: 10px 20px 30px;`

        -   First = top

        -   Second = left AND right

        -   Third = bottom

        **4 values:** `margin: 10px 20px 30px 40px;`

        -   Goes clockwise: top, right, bottom, left (like a clock starting at 12)
